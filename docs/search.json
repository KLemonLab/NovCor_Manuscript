[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Description of two novel Corynebacterium species isolated from human nasal passages and skin",
    "section": "",
    "text": "Introduction\nThis repository includes Supplemental Methods for the manuscript “Description of two novel Corynebacterium species isolated from human nasal passages and skin”.\n\n\n\n\n\n\nImportant\n\n\n\nAfter Publication\nAdd link to the corresponding manuscript."
  },
  {
    "objectID": "Methods_Prokka_Annotations.html#custom-prokka-annotations",
    "href": "Methods_Prokka_Annotations.html#custom-prokka-annotations",
    "title": "Prokka Annotations",
    "section": "Custom Prokka Annotations",
    "text": "Custom Prokka Annotations\nWe annotated the genomes with Prokka v1.14.6 (Seemann, 2014) in two different ways for proper compatibility and strain labeling with both GET_HOMOLOGUES and anvi’o.\n\nProkka annotations for GET_HOMOLOGUES\nWe annotated the 92 Corynebacterium strain genomes described in Table S2. These genomes are listed in NovCor_AnnotationProkka_GenomeList_v02.csv.\nThis step annotates all the .fasta files in the selected input folder (path_i) and places all the output annotated files in the output folder (path_o). Output files headers get updated with –genus ‘Corynebacterium’ –species ‘sp’ and –strain based on the file name. We used default parameters, including gene recognition and translation initiation site identification with Prodigal (Hyatt et al., 2010).\n\n#conda activate Prokka\n\npath_i=\"data/genomes\"\npath_o=\"data/GET_HOMOLOGUES/Prokka_out\"\nmkdir -p \"$path_o\"\n\nfor file in $path_i/*.f*; do\n    FILENAME=`basename ${file%.*}`\n    prokka --prefix $FILENAME --outdir $path_o --genus 'Corynebacterium' --species 'sp' --strain $FILENAME --centre X --compliant --cpus 0 --force $file; \ndone\n\n\n\nProkka annotation for anvi’o\nWe selected 30 Corynebacterium strains for analysis of KEGG metabolic capabilities using anvi’o. These genomes are listed in NovCor_AnnotationAnvio_GenomeList_v02.csv and included in data/genomes as .fasta files.\nMore information about importing Prokka annotations into anvi’o can be found here: https://merenlab.org/2017/05/18/working-with-prokka/#note-for-the-pangenomics-workflow\n\nFasta reformatting\nBefore the annotation step with Prokka we need to reformat the .fasta files using anvi-script-reformat-fasta. This script creates .fasta files with simplified deflines and also by using --seq-type NT prevents downstream errors with “characters that are not any of A, C, T, G, N, a, c, t, g, n.”\n\n#conda activate anvio-dev\n\npath_i=\"data/genomes\"\npath_o=\"data/Anvio8/Reformatted\"\nmkdir -p \"$path_o\"\n\nfor file in $path_i/*.f*; do\n    FILENAME=`basename ${file%.*}`\n    anvi-script-reformat-fasta -o $path_o/$FILENAME.fa --min-len 0 --simplify-names $file --seq-type NT; \ndone\n\n\n\nProkka annotation\nThis step repeats the Prokka annotation using the anvi’o reformatted .fasta files.\nOutput files headers get updated with –genus –species and –strain based on the info in the genomes list .csv file.\n\n#conda activate Prokka\n\ncsv_file=\"data/genome_lists/NovCor_AnnotationAnvio_GenomeList_v01.csv\"\npath_i=\"data/Anvio8/Reformatted\"\npath_o=\"data/Anvio8/Prokka_out\"\nmkdir -p \"$path_o\"\n\nwhile IFS=',' read -r name genus species; do\n    if [[ \"$name\" != \"name\" ]]; then  # Skip the header\n        prokka --prefix \"$name\" --outdir \"$path_o\" --genus \"$genus\" --species \"$species\" --strain \"$name\" --cpus 0 --force \"$path_i/$name.fa\"\n    fi\ndone &lt; \"$csv_file\"\n\n\n\nParsing .gff files\nThis step is to parse Prokka annotated genomes to import both the external Prodigal gene calls and functions independently into anvi’o. The input (path_i) is the annotation in GFF3 format and outputs (path_o) are two tab-delimited text files, one for gene calls (calls_*.txt) and one for annotations (annot_*.txt).\nThis is done with the script gff_parser.py described in this tutorial.\n\n#conda activate gffutils\n\npath_i=\"data/Anvio8/Prokka_out\"\npath_o=\"data/Anvio8/Parsed_prokka\"\nmkdir -p \"$path_o\"\n\nfor file in $path_i/*.gff; do\n    FILENAME=`basename ${file%.*}`\n    python scripts/gff_parser.py $file \\\n    --gene-calls $path_o/calls_$FILENAME.txt \\\n    --annotation $path_o/annot_$FILENAME.txt;\ndone\n\n\n\nGenerating contigs databases\nIn this step the reformatted .fa files (path_i) and the external gene calls (calls_*.txt) from Prokka (path_e) get imported to generate anvi’o contig databases (path_o). Initially we got a lot of early stop codon errors. Therefore, we add the –ignore-internal-stop-codons flag.\n\n#conda activate anvio-dev\n\npath_i=\"data/Anvio8/Reformatted\"\npath_e=\"data/Anvio8/Parsed_prokka\"\npath_o=\"data/Anvio8/Contigs_db\"\nmkdir -p \"$path_o\"\n\nfor file in $path_i/*.fa; do\n    FILENAME=`basename ${file%.*}`\n    anvi-gen-contigs-database -f $file \\\n                              -o $path_o/$FILENAME.db \\\n                              --external-gene-calls $path_e/calls_$FILENAME.txt \\\n                              --ignore-internal-stop-codons \\\n                              -n $FILENAME;\ndone\n\n\n\nImporting Prokka functional annotation\nFinally, the external functional annotations (annot_*.txt) from Prokka (path_e) get imported into the Anvi’o contigs databases (path_i).\n\n#conda activate anvio-dev\n\npath_i=\"data/Anvio8/Contigs_db\"\npath_e=\"data/Anvio8/Parsed_prokka\"\n\nfor file in $path_i/*.db; do\n    FILENAME=`basename ${file%.*}`\n    anvi-import-functions -c $file \\\n                          -i $path_e/annot_$FILENAME.txt\n      \ndone\n\n\n\n\n\n\n\nHyatt, D., Chen, G.-L., LoCascio, P. F., Land, M. L., Larimer, F. W. and Hauser, L. J. (2010). Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics 11,.\n\n\nSeemann, T. (2014). Prokka: rapid prokaryotic genome annotation. Bioinformatics 30, 2068–2069."
  },
  {
    "objectID": "Methods_ANIs.html#pyani",
    "href": "Methods_ANIs.html#pyani",
    "title": "Average Nucleotide Identity (ANI)",
    "section": "pyANI",
    "text": "pyANI\nWe used 30 Corynebacterium genomes listed in NovCor_ANI_GenomeList_v01.csv.\nCopy genomes of use to another directory:\n\n# Specify the CSV file\ncsv_file=\"data/genome_lists/NovCor_ANI_GenomeList_v01.csv\"\n\n# Specify the source directory\nsource_dir=\"data/genomes\"\n\n# Specify the destination directory\ndest_dir=\"data/pyani/genomes\"\n\n# Read the CSV file line by line\nwhile IFS=, read -r file_name rest_of_line\ndo\n    # Copy the file to the destination directory\n    cp \"${source_dir}/${file_name}\" \"${dest_dir}\"\ndone &lt; \"$csv_file\"\n\nRun pyani:\n\n#conda activate pyani\n\n# Set paths\npath_i=\"data/pyani/genomes\"\npath_o=\"data/pyani\"\n\naverage_nucleotide_identity.py -v -i \"$path_i\" \\\n    -o \"$path_o\" -m ANIb"
  },
  {
    "objectID": "Methods_ANIs.html#plot",
    "href": "Methods_ANIs.html#plot",
    "title": "Average Nucleotide Identity (ANI)",
    "section": "Plot",
    "text": "Plot\nCreate a plot from the ANIb_percentage_identity.tab file given by pyani. We match the ordering in ANIb_percentage_identity.svg by creating an ordering file NovCor_pyANI_PlotOrder.txt\n\n# Define the path of the input file\ninput = \"data/pyani/ANIb_output/ANIb_percentage_identity.tab\"\n\n# Read the data\nANI_data &lt;- read.table(input, header = TRUE, sep = \"\\t\")\n\n# Convert the data from wide format to long format\nANI_data.long &lt;- ANI_data %&gt;%\n  # Rename the 'X' column to 'Genome1'\n  rename(Genome1 = X) %&gt;%\n  pivot_longer(cols = -Genome1, names_to = \"Genome2\", values_to = \"PercentIdentity\")\n\n# Read the strain order from a CSV file and specify the order of the levels\nStrainOrder &lt;- read_csv(\"data/genome_lists/NovCor_pyANI_PlotOrder.txt\")\nStrainOrder$Genome &lt;- factor(StrainOrder$Genome, levels=rev(StrainOrder$Genome))\n\n# Join the ANI_data.long and StrainOrder data frames based on Genome1\nANI_data.long &lt;- left_join(ANI_data.long, StrainOrder, by = c(\"Genome1\" = \"Genome\")) %&gt;% \n  rename(styled_Genome1 = styled_Genome) \n\n# Convert the 'styled_Genome1' column to a factor and specify the order of the levels\nANI_data.long$styled_Genome1 &lt;- factor(ANI_data.long$styled_Genome1, levels=rev(StrainOrder$styled_Genome))\n\n# Join the ANI_data.long and StrainOrder data frames based on Genome2\nANI_data.long &lt;- left_join(ANI_data.long, StrainOrder, by = c(\"Genome2\" = \"Genome\")) %&gt;% \n  rename(styled_Genome2 = styled_Genome) \n\n# Convert the 'styled_Genome2' column to a factor and specify the order of the levels\nANI_data.long$styled_Genome2 &lt;- factor(ANI_data.long$styled_Genome2, levels=rev(StrainOrder$styled_Genome))\n\n\n# Create a ggplot object with styled_Genome1 on the x-axis, styled_Genome2 on the y-axis, and fill color representing PercentIdentity\npANI &lt;- ggplot(ANI_data.long, aes(x = styled_Genome1, y = styled_Genome2, fill = PercentIdentity)) + \n# Add a tile layer to the plot with specified width and height\n  geom_tile(width = 1.0, height = 1.0) +\n# Add text to each tile showing the rounded PercentIdentity value\n  geom_text(aes(label = sprintf(\"%.1f\", round(PercentIdentity * 100, 1))), size = 3, colour = \"black\") +\n# Use the viridis color palette for the fill color and scale the labels to percent\n  scale_fill_viridis(option = \"A\", begin = 0.4, labels = function(x) sprintf(\"%.0f\", x * 100)) + \n# Set the position of the y-axis labels to the right\n  scale_y_discrete(position = \"right\") +\n# Set the plot title and remove the x and y axis labels\n  labs(x = NULL, y = NULL, title = NULL) +\n# Use a white background for the plot\n  theme_bw() +\n# Customize the plot theme\n  theme(axis.text.x = element_markdown(angle = 45, vjust = 1, hjust = 1, color = \"black\"),\n        axis.text.y = element_markdown(color = \"black\"),\n        panel.border = element_blank(),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(), \n        axis.ticks = element_blank(),\n        plot.margin = margin(0, 0.25, 0.25, 1, \"cm\"),\n        legend.position = c(1.1, -0.15), \n        legend.direction = \"horizontal\",\n        legend.justification = c(1, 0)) +\n# Add a colorbar legend for the fill color with a specified title and position\n  guides(fill = guide_colourbar(title=\"% identity\", title.position=\"top\", title.hjust=0.5, barwidth=6))\npANI\n\n\n# Function to add colored rectangles to the plot\nadd_rectangles_to_heatmap &lt;- function(plot, levels, top, bottom, color) {\n  top_pos &lt;- which(levels == top)\n  bottom_pos &lt;- which(levels == bottom)\n\n  p_with_rect &lt;- plot +\n    geom_rect(\n      aes(xmin = top_pos + 0.5, \n          xmax = bottom_pos - 0.5,\n          ymin = top_pos + 0.5, \n          ymax = bottom_pos - 0.5),\n      fill = NA,\n      color = color,\n      size = 1\n    )\n  \n  return(p_with_rect)\n}\n\n\ngenome_levels &lt;- levels(StrainOrder$Genome)\npANI &lt;- add_rectangles_to_heatmap(pANI, genome_levels, \"Ctu_MSK207\", \"Ctu_DSM_44922\", \"#002BFF\") \npANI &lt;- add_rectangles_to_heatmap(pANI, genome_levels, \"Cmq_MSK144\", \"Cau_620_CAUR\", \"#39D9E5\")\npANI &lt;- add_rectangles_to_heatmap(pANI, genome_levels, \"Cyo_MSK136\", \"Cyo_KPL2619\", \"#0A6003\")\npANI &lt;- add_rectangles_to_heatmap(pANI, genome_levels, \"Cha_CTNIH23\", \"Cha_CTNIH22\", \"#0ABF00\") \npANI &lt;- add_rectangles_to_heatmap(pANI, genome_levels, \"Ccu_CTNIH19\", \"Ccu_c8Ua_181\", \"#FF00FF\")\npANI &lt;- add_rectangles_to_heatmap(pANI, genome_levels, \"Cna_MSK071\", \"Cna_KPL4072\", \"#8200E7\")\npANI\n\n# Save the plot as PNG\nggsave(\"data/pyani/Figure/NovCor_pyani.png\", plot = pANI, width = 12, height = 9, dpi = 300)"
  },
  {
    "objectID": "Methods_Phylogenies.html#corynebacterium-tuberculostearicum-species-complex-conservative-core-phylogeny",
    "href": "Methods_Phylogenies.html#corynebacterium-tuberculostearicum-species-complex-conservative-core-phylogeny",
    "title": "Phylogenies",
    "section": "Corynebacterium tuberculostearicum Species Complex Conservative Core Phylogeny",
    "text": "Corynebacterium tuberculostearicum Species Complex Conservative Core Phylogeny\nCorynebacterium genomes listed in NovCor_CTSC_Tree_GenomeList.csv with Mycobacterium_tuberculosis_H37Rv as an outgroup were used in the next 3 phylogenies.\nClustered with BDBH, COGS, and OMCL:\n\n# conda activate get_homologues\n\npath_i=\"data/GET_HOMOLOGUES/Prokka_gbk_TreeCTSC_gbk\"\n\n# Cluster with BDBH\nget_homologues.pl -d \"$path_i\" -n 16 -t 30 -C 90\n\n# Cluster with COGS\nget_homologues.pl -d \"$path_i\" -n 16 -t 0 -C 90 -G\n\n# Cluster with OMCL\nget_homologues.pl -d \"$path_i\" -n 16 -t 0 -C 90 -M\n\nFrom our experience you will run into less issues if you move the three cluster folders and cluster list files into a new directory we manually moved them to data/GET_HOMOLOGUES/CTSC_Clusters. Then use the paths to those cluster folders after the -d flag separated by commas.\nCreate conservative core Venn diagram intersection to output .faa and .fna files:\n\n# conda activate get_homologues\n\npath_i=\"data/GET_HOMOLOGUES/CTSC_clusters\"\npath_o=\"data/GET_HOMOLOGUES/CTSC_intersection\"\n\n# Creates a conservative core with the output of faa files\ncompare_clusters.pl -o \"$path_o\" \\\n                      -d \"$path_i/CTSC_f0_30taxa_algBDBH_e0_C90_,$path_i/CTSC_f0_0taxa_algCOG_e0_C90_,$path_i/CTSC_f0_0taxa_algOMCL_e0_C90_\" \\\n                      -t 30\n                        \n# Creates a conservative core with the output of fna files from the additional `-n` flag\ncompare_clusters.pl -o \"$path_o\" \\\n                      -d \"$path_i/CTSC_f0_30taxa_algBDBH_e0_C90_,$path_i/CTSC_f0_0taxa_algCOG_e0_C90_,$path_i/CTSC_f0_0taxa_algOMCL_e0_C90_\" \\\n                      -t 30 \\\n                      -n \n\nWe had a total of 309 conservative core gene clusters. At this point we have created .faa and .fna files of the core gene clusters from 30 Corynebacterium genomes. Next, to begin generating a phylogenomic tree we isolated only the .faa and .fna files into a new folder.\nCreate a new folder and move all files with the extension .faa and .fna into a new destination folder:\n\ncd \"data/GET_HOMOLOGUES/CTSC_intersection\"\nmkdir -p \"data/GET_HOMOLOGUES/CTSC_faa_fna\"\npath_o=\"data/GET_HOMOLOGUES/CTSC_faa_fna\"\nmv *.faa \"$path_o\"\nmv *.fna \"$path_o\"\n\nNow we use GET_PHYLOMARKERS version 2.2.9.1 (Vinuesa, Ochoa-Sánchez, and Contreras-Moreira 2018) to generate a concatenated alignment file for each single copy core gene cluster.\nConcatenate and align the files inside data/GET_HOMOLOGUES/CTSC_faa_fna to generate codon alignment files:\n\n# Go to directory holding all the .fna and .faa files only\ncd \"data/GET_HOMOLOGUES/CTSC_faa_fna\" \n\n# Run the get_phylomarkers master script using the path from where it is installed on your system\n$path/run_get_phylomarkers_pipeline.sh -R 1 -t DNA -k 0.7 -m 0.7\n\nGET_PHYLOMARKERS will generate codon alignment .fasta files which we moved to data/GET_HOMOLOGUES/CTSC_aligned_concatenated_core_GCs:\n\ncd \"data/GET_HOMOLOGUES/CTSC_faa_fna/get_phylomarkers\"\n\nmv *.fasta \"data/GET_HOMOLOGUES/CTSC_aligned_concatenated_core_GCs\"\n\nRun IQ-TREE v2.2.2.6 (Minh et al. 2020) with the codon alignment folder containing codon .fasta files:\n\n# Go to where IQTREE2 is installed on your system\ncd $path/IQTREE2\n\n# Run iqtree2\npath_i=\"data/GET_HOMOLOGUES/CTSC_aligned_concatenated_core_GCs\"\n\nbin/iqtree2 -p \"$path_i\" --prefix CTSC_30 -alrt 1000 -B 1000 -T 16\n\nThe -p flag performs edge-linked proportional partition model (Chernomor, Haeseler, and Minh 2016) for each of the individual gene clusters. Fast model selection for each cluster was determined by ModelFinder (Kalyaanamoorthy et al. 2017). The flags -alrt 1000 and -B 1000 represent 1000 replicates of sH-aLRT and UFbootstraps. -T 16 runs the program at 16 CPU threads.\nThis will create a .treefile file with the best fit maximum likelyhood (ML) tree. This .treefile can be viewed and edited through iTol annotation editor (Letunic and Bork 2021) on Google Chrome browser. In iTol the tree can be scaled and assigned strain names from the tree_labels.list file created from GET_PHYLOMARKERS. After scaling and assigning strain names an .svg was exported from iTol and further edited in Adobe Illustrator."
  },
  {
    "objectID": "Methods_Phylogenies.html#corynebacterium-tuberculostearicum-species-16s-phylogeny",
    "href": "Methods_Phylogenies.html#corynebacterium-tuberculostearicum-species-16s-phylogeny",
    "title": "Phylogenies",
    "section": "Corynebacterium tuberculostearicum Species 16S Phylogeny",
    "text": "Corynebacterium tuberculostearicum Species 16S Phylogeny\n\nRun barrnap Corynebacterium tuberculostearicum species complex genomes plus Mycobacterium_tuberculosis_H37Rv\n\n# Make directories\nmkdir -p \"data/genomes/CTSC_fasta\"\nmkdir -p \"data/genomes/CTSC_barrnap\"\n\n# Set paths\npath_i=\"data/genomes/CTSC_fasta\"\npath_o=\"data/genomes/CTSC_barrnap\"\n\n# Run barrnap\nfor file in $path_i/*.fa*; do\n    FILENAME=`basename ${file%.*}`\n    echo $FILENAME\n    barrnap $file --outseq $path_o/$FILENAME.allrRNA.fasta --threads 16; \ndone\n\n\n\nFilter out no copies, single copy, and multiple 16S rRNA copies\n\n# Move strains with no 16s identified sequence into a folder\ncd \"data/genomes/CTSC_barrnap\"\n\n# Create folder to parse out different identified copy numbers\nmkdir -p \"nocopies\"\nmkdir -p \"singlecopy\"\nmkdir -p \"multiplecopies\"\n\n# Set paths\npath_o=\"data/genomes/CTSC_barrnap\"\nnocopies=\"$path_o/nocopies\"\nsinglecopy=\"$path_o/singlecopy\"\nmultiplecopies=\"$path_o/multiplecopies\"\n\n# Move strains with no 16s identified sequence into a folder\nfor file in \"$path_o\"/*; do\n    if [ -f \"$file\" ]; then \n        count=$(grep -c \"16S_rRNA\" \"$file\")\n\n        if [ \"$count\" -eq 0 ]; then\n            echo \"Extracting $file\"\n            mv \"$file\" \"$nocopies\"\n        fi\n    fi\ndone\n\n# Move strains with only one 16s copy into a folder\nfor file in \"$path_o\"/*; do\n    if [ -f \"$file\" ]; then  \n        count=$(grep -c \"16S_rRNA\" \"$file\")\n        if [ \"$count\" -eq 1 ]; then\n            echo \"Extracting $file\"\n            mv \"$file\" \"$singlecopy\"\n        fi\n    fi\ndone\n\n# Move strains with two or more 16s copies into a folder\nfor file in \"$path_o\"/*; do\n    if [ -f \"$file\" ]; then\n        count=$(grep -c \"16S_rRNA\" \"$file\")\n        if [ \"$count\" -ge 2 ]; then\n            echo \"Extracting $file\"\n            mv \"$file\" \"$multiplecopies\"\n        fi\n    fi\ndone\n\nStrains that had NO identified 16S sequences are not used any further, in data/16_phylogenies/CTSC_barrnap/nocopies. There were no strains in the CTSC group that no copies."
  },
  {
    "objectID": "Methods_Phylogenies.html#single-copy-versus-multiple-copies-instructions",
    "href": "Methods_Phylogenies.html#single-copy-versus-multiple-copies-instructions",
    "title": "Phylogenies",
    "section": "Single copy versus multiple copies instructions",
    "text": "Single copy versus multiple copies instructions\n\nStrains with a single 16S rRNA sequence\nSubset the 16S rRNA sequences:\n\nfor file in $singlecopy/*.allrRNA.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit grep -r -n -p '16S_rRNA*' $file -o $singlecopy/$FILENAME.16S.fasta;\ndone\n\nRename Headers for the 16S.fasta files:\n\nfor file in $singlecopy/*.16S.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit replace --f-by-name -p '16S_rRNA.*' -r $FILENAME $file -o $single_copy/$FILENAME.16Sclean.fasta;\ndone\n\nConcatenate the single 16S rRNA copies:\n\ncat $singlecopy/*.16Sclean.fasta &gt; $singlecopy/All16S_singlecopy.fasta\n\n\n\nStrains with multiple 16S rRNA copies\nSubset the 16S rRNA sequences:\n\nfor file in $multiplecopies/*.allrRNA.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit grep -r -n -p '16S_rRNA*' $file -o $multiplecopies/$FILENAME.16S.fasta;\ndone\n\nThe command em_cons is used for Ubuntu and cons for MacOS after installing the EMBOSS package. Make consensus per genome:\n\nfor file in $multiplecopies/*.16S.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    em_cons $file -outseq $multiplecopies/$FILENAME.16Sconsensus.fasta;\ndone\n\nRename Headers for the 16sconsensus.fasta files:\n\nfor file in $multiplecopies/*.16Sconsensus.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit replace --f-by-name -p 'EMBOSS_001' -r $FILENAME $file -o $multiplecopies/$FILENAME.16Sconsensusclean.fasta;\ndone\n\nConcatenate:\n\ncat $multiplecopies/*.16Sconsensusclean.fasta &gt; $multiplecopies/All16Sconsensus.fasta"
  },
  {
    "objectID": "Methods_Phylogenies.html#section",
    "href": "Methods_Phylogenies.html#section",
    "title": "Phylogenies",
    "section": "",
    "text": "Concatenate and align single copy 16S sequences with consensus sequences\n\n# Set paths and make directory\npath_o=\"data/16s_phylogenies/CTSC_barrnap\"\nmkdir -p \"$path_o/16S_CTSC_full_concatenated_alignment\"\npath_x=\"$path_o/16S_CTSC_full_concatenated_alignment\"\n\n# Concatenate the single and multiple copy .fasta files into one\ncat $singlecopy/All16S_singlecopy.fasta $multiplecopies/All16Sconsensus.fasta &gt; $path_x/All16S_concatenated.fasta\n\n# Use muscle to align the sequences in the combined concatenated .fasta\nmuscle -in $path_x/All16S_concatenated.fasta -out $path_x/All16S_concatenated_and_aligned.fasta\n\n\n\nRun IQTREE2\n\ncd IQTREE2\n\nbin/iqtree2 -s \"$path_x/All16S_concatenated_and_aligned.fasta\" --prefix 16s_Ctu_complex_test -alrt 1000 -B 1000 -T 16 -m MFP"
  },
  {
    "objectID": "Methods_Phylogenies.html#corynebacterium-tuberculostearicum-species-complex-genomes-plus-mycobacterium_tuberculosis_h37rv-full-length-rpob-gene-phylogeny",
    "href": "Methods_Phylogenies.html#corynebacterium-tuberculostearicum-species-complex-genomes-plus-mycobacterium_tuberculosis_h37rv-full-length-rpob-gene-phylogeny",
    "title": "Phylogenies",
    "section": "Corynebacterium tuberculostearicum species complex genomes plus Mycobacterium_tuberculosis_H37Rv full length rpoB gene phylogeny",
    "text": "Corynebacterium tuberculostearicum species complex genomes plus Mycobacterium_tuberculosis_H37Rv full length rpoB gene phylogeny\nWe located and used the concatenated and aligned rpoB gene generated from GET_PHYLOMARKERS:\n\ncd IQTREE2\npath_i=\"data/GET_HOMOLOGUES/rpoB/CTSC_rpoB_cdnAln.fasta\"\n\nbin/iqtree2 -s \"$path_i\" --prefix CTSC_rpoB -alrt 1000 -B 1000 -T 16\n\nUse the .treefile in iTol and Adobe illustrator"
  },
  {
    "objectID": "Methods_Phylogenies.html#overall-corynebacterium-genus-conservative-core-phylogeny",
    "href": "Methods_Phylogenies.html#overall-corynebacterium-genus-conservative-core-phylogeny",
    "title": "Phylogenies",
    "section": "Overall Corynebacterium genus Conservative Core Phylogeny",
    "text": "Overall Corynebacterium genus Conservative Core Phylogeny\nThe genomes used for the next 3 phylogenies are listed in the file NovCor_FigS1_Phylogenies_GenomeList.csv.\n72 Corynebacterium genomes clustered with BDBH, COGS, and OMCL:\n\n# conda activate get_homologues\n\npath_i=\"data/GET_HOMOLOGUES/Prokka_gbk_TreeCoryneGenus_gbk\"\n\n# Cluster with BDBH\nget_homologues.pl -d \"$path_i\" -n 16 -t 72 -C 90\n\n# Cluster with COGS\nget_homologues.pl -d \"$path_i\" -n 16 -t 0 -C 90 -G\n\n# Cluster with OMCL\nget_homologues.pl -d \"$path_i\" -n 16 -t 0 -C 90 -M\n\nCreate conservative core Venn diagram intersection to output .faa and .fna files:\n\n# conda activate get_homologues\n\npath_i=\"data/GET_HOMOLOGUES/TreeCoryneGenus_clusters\"\npath_o=\"data/GET_HOMOLOGUES/TreeCoryneGenus_intersection\"\n\n# Creates a conservative core with the output of faa files\ncompare_clusters.pl   -o \"$path_o\" \\\n                      -d \"$path_i/CoryneGenus_f0_72taxa_algBDBH_e0_C90_,$path_i/CoryneGenus_f0_0taxa_algCOG_e0_C90_,$path_i/CoryneGenus_f0_0taxa_algOMCL_e0_C90_\" \\\n                      -t 72\n                        \n# Creates a conservative core with the output of fna files from the additional `-n` flag\ncompare_clusters.pl   -o \"$path_o\" \\\n                      -d \"$path_i/CoryneGenus_f0_72taxa_algBDBH_e0_C90_,$path_i/CoryneGenus_f0_0taxa_algCOG_e0_C90_,$path_i/CoryneGenus_f0_0taxa_algOMCL_e0_C90_\" \\\n                      -t 72 \\\n                      -n \n\nWe had a total of 193 conservative core gene clusters.\nCreate a new folder and move all files with the extension .faa and .fna into a new destination folder:\n\ncd \"data/GET_HOMOLOGUES/TreeCoryneGenus_intersection\"\nmkdir -p \"data/GET_HOMOLOGUES/TreeCoryneGenus_faa_fna\"\npath_o=\"data/GET_HOMOLOGUES/TreeCoryneGenus_faa_fna\"\nmv *.faa \"$path_o\"\nmv *.fna \"$path_o\"\n\nConcatenate and align the files inside data/GET_HOMOLOGUES/TreeCoryneGenus_faa_fna to generate codon alignment files:\n\n# Go to directory holding all the .fna and .faa files only\ncd \"data/GET_HOMOLOGUES/TreeCoryneGenus_faa_fna\" \n\n# Run the get_phylomarkers master script using the path from where it is installed on your system\n$path/run_get_phylomarkers_pipeline.sh -R 1 -t DNA -k 0.7 -m 0.7\n\nRun IQ-TREE v2.2.2.6 (Minh et al. 2020) with the codon alignment folder containing codon .fasta files:\n\n# Go to where IQTREE2 is installed on your system\ncd $path/IQTREE2\n\n# Run iqtree2\npath_i=\"data/GET_HOMOLOGUES/TreeCoryneGenus_faa_fna/get_phylomarkers/condon_fastas\n\nbin/iqtree2 -p \"$path_i\" --prefix TreeCoryneGenus_72 -alrt 1000 -B 1000 -T 16\n\nThis will create a .treefile file with the best fit maximum likelyhood (ML) tree. This .treefile can be viewed and edited through iTol annotation editor (Letunic and Bork 2021) on Google Chrome browser. In iTol the tree can be scaled and assigned strain names from the tree_labels.list file created from GET_PHYLOMARKERS. After scaling and assigning strain names an .svg was exported from iTol and further edited in Adobe Illustrator."
  },
  {
    "objectID": "Methods_Phylogenies.html#overall-corynebacterium-genus-16s-rrna-phylogeny",
    "href": "Methods_Phylogenies.html#overall-corynebacterium-genus-16s-rrna-phylogeny",
    "title": "Phylogenies",
    "section": "Overall Corynebacterium genus 16s rRNA Phylogeny",
    "text": "Overall Corynebacterium genus 16s rRNA Phylogeny\n\nRun barrnap for all genomes\n\n# Set up paths\npath_i=\"data/16S_phylogenies/CoryneGenus_fasta\"\npath_o=\"data/16S_phylogenies/CoryneGenus_barrnap\"\n\n# Run barrnap\nfor file in $path_i/*.fa*; do\n    FILENAME=`basename ${file%.*}`\n    echo $FILENAME\n    barrnap $file --outseq $path_o/$FILENAME.allrRNA.fasta --threads 8; \ndone\n\n\n\nSubset the 16S rRNA sequences:\n\n# conda activate seqkit\n\nfor file in $path_o/*.allrRNA.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit grep -r -n -p '16S_rRNA*' $file -o $path_o/$FILENAME.16S.fasta;\ndone\n\n\n\nMove into different folders for no copy, single copy, and multiple 16S rRNA copies\n\n# Move strains with no 16s identified sequence into a folder\ncd \"data/genomes/CoryneGenus_barrnap\"\n\n# Create folder to parse out different identified copy numbers\nmkdir -p \"nocopies\"\nmkdir -p \"singlecopy\"\nmkdir -p \"multiplecopies\"\n\n# Set paths\npath_o=\"data/genomes/CoryneGenus_barrnap\"\nnocopies=\"$path_o/nocopies\"\nsinglecopy=\"$path_o/singlecopy\"\nmultiplecopies=\"$path_o/multiplecopies\"\n\n# Move strains with no 16s identified sequence into a folder\nfor file in \"$path_o\"/*; do\n    if [ -f \"$file\" ]; then \n        count=$(grep -c \"16S_rRNA\" \"$file\")\n        if [ \"$count\" -eq 0 ]; then\n            echo \"Extracting $file\"\n            mv \"$file\" \"$nocopies\"\n        fi\n    fi\ndone\n\n# Move strains with only one 16s copy into a folder\nfor file in \"$path_o\"/*; do\n    if [ -f \"$file\" ]; then  \n        count=$(grep -c \"16S_rRNA\" \"$file\")\n        if [ \"$count\" -eq 1 ]; then\n            echo \"Extracting $file\"\n            mv \"$file\" \"$singlecopy\"\n        fi\n    fi\ndone\n\n# Move strains with two or more 16s copies into a folder\nfor file in \"$path_o\"/*; do\n    if [ -f \"$file\" ]; then\n        count=$(grep -c \"16S_rRNA\" \"$file\")\n        if [ \"$count\" -ge 2 ]; then\n            echo \"Extracting $file\"\n            mv \"$file\" \"$multiplecopies\"\n        fi\n    fi\ndone\n\nStrains that had NO identified 16S sequences are not used any further, in data/16_phylognies/CoryneGenus_barrnap/nocopies. C_mastitidis_DSM_44356 had no identified 16S rRNA sequence and was excluded from the final 16S rRNA phylogeny."
  },
  {
    "objectID": "Methods_Phylogenies.html#instructions-for-single-and-multiple-16s-rrna-copies",
    "href": "Methods_Phylogenies.html#instructions-for-single-and-multiple-16s-rrna-copies",
    "title": "Phylogenies",
    "section": "Instructions for single and multiple 16S rRNA copies",
    "text": "Instructions for single and multiple 16S rRNA copies\n\nStrains with a single 16S rRNA sequence\nRename Headers for the 16S.fasta files:\n\npath_o=\"data/16S_phylogenies/CoryneGenus_barrnap\"\nsingle_copy=\"$path_o/single_copy\"\n\nfor file in $single_copy/*.16S.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit replace --f-by-name -p '16S_rRNA.*' -r $FILENAME $file -o $single_copy/$FILENAME.16Sclean.fasta;\ndone\n\nConcatenate the single 16S rRNA copies:\n\ncat $single_copy/*.16Sclean.fasta &gt; $single_copy/All16S_singlecopy.fasta\n\n\n\nStrains with multiple 16S rRNA copies\nThe command em_cons is used for Ubuntu and cons for MacOS after installing the EMBOSS package. Make consensus per genome:\n\nfor file in $multiplecopies/*.16S.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    em_cons $file -outseq $multiplecopies/$FILENAME.16Sconsensus.fasta;\ndone\n\nRename Headers for the 16sconsensus.fasta files:\n\nfor file in $multiplecopies/*.16Sconsensus.fasta; do\n    FILENAME=`basename ${file%.*.*}`\n    seqkit replace --f-by-name -p 'EMBOSS_001' -r $FILENAME $file -o $multiplecopies/$FILENAME.16Sconsensusclean.fasta;\ndone\n\nConcatenate:\n\ncat $multiplecopies/*.16Sconsensusclean.fasta &gt; $multiplecopies/All16Sconsensus.fasta"
  },
  {
    "objectID": "Methods_Phylogenies.html#section-1",
    "href": "Methods_Phylogenies.html#section-1",
    "title": "Phylogenies",
    "section": "",
    "text": "Concatenate and align single copy 16S sequences with consensus sequences\n\n# Set paths\npath_o=\"data/16s_phylogenies/CoryneGenus_barrnap\"\nmkdir -p \"$path_o/16S_CoryneGenus_full_concatenated_alignment\"\npath_x=\"$path_o/16S_CoryneGenus_full_concatenated_alignment\"\n\n# Concatenate the single and multiple copy .fasta files into one\ncat $singlecopy/All16S_singlecopy.fasta $multiplecopies/All16Sconsensus.fasta &gt; $path_x/All16S_concatenated.fasta\n\n# Use muscle to align the sequences in the combined concatenated .fasta\nmuscle -in $path_x/All16S_concatenated.fasta -out $path_x/All16S_concatenated_and_aligned.fasta\n\n\n\nRun iqtree2\n\ncd /Users/klemonlab/iqtree-2.2.2.4-MacOSX\n\nbin/iqtree2 -s \"$path_o/16S_full_alignment/All16S_concatenated_and_aligned.fasta\" --prefix Overall_Corye_NovCor_NO_MAGS -alrt 1000 -B 1000 -T 16 -m MFP"
  },
  {
    "objectID": "Methods_Phylogenies.html#overall-corynebacterium-rpob-tree",
    "href": "Methods_Phylogenies.html#overall-corynebacterium-rpob-tree",
    "title": "Phylogenies",
    "section": "Overall Corynebacterium rpoB tree",
    "text": "Overall Corynebacterium rpoB tree\n\ncd IQTREE2\npath_i=\"data/GET_HOMOLOGUES/rpoB/CoryneGenus_rpoB_cdnAln.fasta\"\n\n\nbin/iqtree2 -s \"$path_i\" --prefix CoryneGenus_rpoB -alrt 1000 -B 1000 -T 16\n\nUse .treefile in iTol and Adobe illustrator\nThe 3 phylogenies in Figure S3 were generated similarly and the genome list is NovCor_FigS3_Phylogenies_GenomeList_v01.csv."
  },
  {
    "objectID": "Methods_Anvio.html#functional-annotations",
    "href": "Methods_Anvio.html#functional-annotations",
    "title": "Anvio",
    "section": "Functional annotations",
    "text": "Functional annotations\nWe use as input (path_i) the anvi’o contigs database files (.db) that were generated in Methods_Prokka_Annotations.\n\nKEGG annotation\nFirst we downloaded and set up the KEGG KOfam(Kanehisa, 2000; Kanehisa et al., 2022) database using anvi-setup-kegg-data. We used the snapshot of the KEGG database dated 2023-09-22 (hash a2b5bde358bb). It contains 479 modules with 15116 entries.\nThe program anvi-run-kegg-kofams annotates genes in a given anvi’o contigs database with KEGG Orthology (KO) numbers via hits to the KEGG KOfam database. We used -E lower than 1e-15.\n\n#conda activate anvio-dev\n\npath_i=\"data/Anvio8/Contigs_db\"\n\nfor file in $path_i/*.db; do\n    anvi-run-kegg-kofams -T 8 --log-bitscores -E 1e-15 --just-do-it -c $file;\ndone\n\nThe option --log-bitscores records the bit scores values. They get saved to the main folder for the repo, so we moved them to a new subfolder\n\n\npath_i &lt;- \".\"\npath_o &lt;- \"data/Anvio8/KEGG_bitscores\"\ndir.create(file.path(\"data/Anvio8/KEGG_bitscores\"), recursive = TRUE, showWarnings = FALSE)\nfiles_to_move &lt;- list.files(path_i, pattern = \"_bitscores.txt$\", full.names = TRUE)\n\nfor (file in files_to_move) {\n  new_path &lt;- file.path(path_o, basename(file))\n  print(new_path)\n  file.rename(file, new_path)\n}"
  },
  {
    "objectID": "Methods_Anvio.html#metabolic-analysis",
    "href": "Methods_Anvio.html#metabolic-analysis",
    "title": "Anvio",
    "section": "Metabolic Analysis",
    "text": "Metabolic Analysis\n\nEstimation of KEGG module completeness\nUsing anvi-estimate-metabolism we predicted KEGG module completeness as described in (Veseli et al., 2023) for the the organisms listed in NovCor_MetabolicAnalysis_GenomeList_v01.txt. This list includes the 30 Corynebacterium genomes selected for metabolic analysis.\n\n#conda activate anvio-dev\n\ntxt_file=\"data/genome_lists/NovCor_MetabolicAnalysis_GenomeList_v03.txt\"\nprefix=NovCor\npath_o=\"data/Anvio8/Metabolic_Analysis\"\nmkdir -p \"$path_o\"\n\nanvi-estimate-metabolism -e $txt_file \\\n                         -O $path_o/$prefix --add-copy-number --output-modes modules\n\nThe generated NovCor_modules.txt file is included as Table S3 in this publication.\n\nCode for Table 1\n\n# Read modules data and make appropriate labeling columns\nModules &lt;- read_delim(\"data/Anvio8/Metabolic_Analysis/NovCor_modules.txt\", show_col_types = FALSE, col_types = cols(unique_enzymes_hit_counts = col_character(), gene_caller_ids_in_module = col_character())) %&gt;% \n  mutate(module_class_short = paste0(\"(\", substr(module_class, 1, 1), \")\")) %&gt;%\n  unite(modules_label, c(module_class_short, module_category, module_subcategory), sep = \"_\", remove = FALSE) %&gt;% \n  mutate_at(c(\"genome_name\", \"module\", \"module_name\", \"module_category\", \"module_subcategory\", \"modules_label\"), factor)\n\n# Summary tally table of fully stepwise complete modules by species. Filter to modules present in at least 25 genomes\nModulesTable &lt;- Modules %&gt;%\n  filter(stepwise_module_completeness == 1) %&gt;%\n  group_by(module_class, module_category, module_subcategory, module, module_name) %&gt;%\n  tally() %&gt;%\n  ungroup() %&gt;%\n  select(module, module_name, n, -module_class) %&gt;%  \n  arrange(desc(n)) %&gt;%\n  filter(n &gt; 25)\n\nwrite_csv(ModulesTable, \"data/Anvio8/Metabolic_Analysis/Fig_Tables/NovCor_Table1.csv\")\nkable(ModulesTable)\n\n\n\nCode for Figure 3\n\nStrainOrder &lt;- read_csv(\"data/genome_lists/NovCor_MetabolicAnalysis_PlotOrder.txt\")\n\n# When using stepwise_module_completeness some modules can be = 0 for all genomes but still have pathwise_module_completeness &gt; 0. We are removing those modules.\nModules_cleaned &lt;- Modules %&gt;%\n  group_by(module) %&gt;%\n  filter(!all(stepwise_module_completeness == 0)) %&gt;%\n  ungroup() %&gt;%\n  mutate(across(where(is.factor), droplevels))\n\nall_zero_modules &lt;- setdiff(Modules$module, Modules_cleaned$module)\nall_zero_subcategory &lt;- setdiff(Modules$module_subcategory, Modules_cleaned$module_subcategory)\n\n# Calculating mean_stepwise_module_completeness and preparing plot labels \nModules_Means = Modules_cleaned %&gt;% \n  group_by(modules_label, genome_name, .drop = FALSE) %&gt;%\n  summarise(mean_stepwise_module_completeness = mean(stepwise_module_completeness)) %&gt;%\n  mutate(mean_stepwise_module_completeness = coalesce(mean_stepwise_module_completeness, 0)) %&gt;%\n  mutate(species_name = str_extract(genome_name, \"^[^_]+\")) %&gt;%\n  mutate(module_category = str_extract(modules_label, \"^[^_]+_[^_]+\")) %&gt;%\n  mutate(module_category = str_replace_all(module_category, \"_\", \" \")) %&gt;%\n  mutate(modules_final_label = str_replace(modules_label, \"^[^_]+_[^_]+_\", \"\")) %&gt;%\n  mutate_at(c(\"module_category\", \"modules_final_label\"), factor) \n\nModules_Means &lt;- left_join(Modules_Means, StrainOrder, by = \"genome_name\")\n\nModules_Means$species_name &lt;- sub(\"Cke\", \"Cna\", Modules_Means$species_name)\nModules_Means$species_name &lt;- sub(\"Cau\", \"Cmq\", Modules_Means$species_name)\nModules_Means$species_name &lt;- factor(Modules_Means$species_name, levels = c(\"Cna\",\"Ccu\",\"Cha\",\"Cyo\",\"Cmq\",\"Ctu\"))\nModules_Means$genome_name &lt;- factor(Modules_Means$genome_name, levels = StrainOrder$genome_name)\nModules_Means$styled_genome_name &lt;- factor(Modules_Means$styled_genome_name, levels = rev(StrainOrder$styled_genome_name))\nModules_Means$modules_final_label  &lt;- factor(Modules_Means$modules_final_label, rev(levels(Modules_Means$modules_final_label)))\n\n\n# Colors for plot\ncolorsSpecies &lt;- c(\"#8200E7\", \"#FF00FF\", \"#0ABF00\", \"#0A6003\", \"#39D9E5\", \"#002BFF\")\n\n# Heatmap plot\nplot &lt;- ggplot(Modules_Means, aes(x = styled_genome_name, y = modules_final_label, fill = mean_stepwise_module_completeness)) + \n  geom_tile(color = \"white\") +\n  facet_grid2(module_category ~ species_name, scales = \"free\", space = \"free\", switch = \"y\", labeller = label_wrap_gen(width = 31),\n              #strip = strip_themed(background_x = elem_list_rect(fill = colorsSpecies))) +\n              strip = strip_themed(text_x = elem_list_text(colour = colorsSpecies))) +\n  labs(x = \"\", y = \"\") +\n  scale_y_discrete(expand = c(0,0), position = \"right\") +\n  scale_x_discrete(expand = c(0,0)) +\n  scale_fill_viridis(direction = -1, option = \"A\", begin = 0.2) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text.y.left = element_text(angle = 0, hjust = 0.5, size = 11),\n        strip.text.x = element_text(size = 12, face = \"bold\"),\n        axis.text.y = element_text(size = 11, color = \"black\"),\n        axis.text.x = element_markdown(angle = 45, hjust = 1, size = 11, color = \"black\"),\n        panel.spacing = unit(0, 'pt'),\n        legend.position = c(1.30, -0.11), \n        legend.direction = \"horizontal\",\n        legend.justification = c(1, 0)) +\n  guides(fill = guide_colourbar(title = \"Average stepwise\\nmodule completeness\", title.position = \"top\", title.hjust = 0.5, barwidth = 8))\n\n\nggsave(plot = plot, filename = \"data/Anvio8/Metabolic_Analysis/Fig_Tables/NovCor_Figure3.jpg\", height = 13, width = 12, device = 'jpg', dpi = 600)\n\nplot\n\n\n\n\n\n\n\nDelmont, T. O. and Eren, A. M. (2018). Linking pangenomes and metagenomes: the Prochlorococcus metapangenome. PeerJ 6, e4320.\n\n\nEren, A. M., Kiefl, E., Shaiber, A., Veseli, I., Miller, S. E., Schechter, M. S., Fink, I., Pan, J. N., Yousef, M., Fogarty, E. C., et al. (2020). Community-led, integrated, reproducible multi-omics with anvi’o. Nature Microbiology 6, 3–6.\n\n\nKanehisa, M. (2000). KEGG: Kyoto encyclopedia of genes and genomes. Nucleic Acids Research 28, 27–30.\n\n\nKanehisa, M., Furumichi, M., Sato, Y., Kawashima, M. and Ishiguro-Watanabe, M. (2022). KEGG for taxonomy-based analysis of pathways and genomes. Nucleic Acids Research 51, D587–D592.\n\n\nVeseli, I., Chen, Y. T., Schechter, M. S., Vanni, C., Fogarty, E. C., Watson, A. R., Jabri, B., Blekhman, R., Willis, A. D., Yu, M. K., et al. (2023). Microbes with higher metabolic independence are enriched in human gut microbiomes under stress. biorxiv."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Delmont, T. O. and Eren, A. M. (2018). Linking pangenomes and\nmetagenomes: the Prochlorococcus\nmetapangenome. PeerJ 6, e4320.\n\n\nEren, A. M., Kiefl, E., Shaiber, A., Veseli, I., Miller, S. E.,\nSchechter, M. S., Fink, I., Pan, J. N., Yousef, M., Fogarty, E. C., et\nal. (2020). Community-led,\nintegrated, reproducible multi-omics with anvi’o.\nNature Microbiology 6, 3–6.\n\n\nHyatt, D., Chen, G.-L., LoCascio, P. F., Land, M. L., Larimer,\nF. W. and Hauser, L. J. (2010). Prodigal: prokaryotic\ngene recognition and translation initiation site identification.\nBMC Bioinformatics 11,.\n\n\nKanehisa, M. (2000). KEGG: Kyoto encyclopedia of\ngenes and genomes. Nucleic Acids Research 28, 27–30.\n\n\nKanehisa, M., Furumichi, M., Sato, Y., Kawashima, M. and\nIshiguro-Watanabe, M. (2022). KEGG for taxonomy-based\nanalysis of pathways and genomes. Nucleic Acids Research\n51, D587–D592.\n\n\nSeemann, T. (2014). Prokka: rapid\nprokaryotic genome annotation. Bioinformatics 30,\n2068–2069.\n\n\nVeseli, I., Chen, Y. T., Schechter, M. S., Vanni, C., Fogarty,\nE. C., Watson, A. R., Jabri, B., Blekhman, R., Willis, A. D., Yu, M. K.,\net al. (2023). Microbes with higher\nmetabolic independence are enriched in human gut microbiomes under\nstress. biorxiv."
  }
]